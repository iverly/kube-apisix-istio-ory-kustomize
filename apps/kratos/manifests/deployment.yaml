---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kratos
  namespace: ory
  labels:
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: ory
  annotations:
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kratos
      app.kubernetes.io/instance: ory
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kratos
        app.kubernetes.io/instance: ory
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/skip-outbound-ports: "5432"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/role: kratos
        vault.hashicorp.com/agent-inject-secret-config: kv/data/applications/ory/kratos
        vault.hashicorp.com/agent-inject-template-config: |
          {{- with secret "kv/data/applications/ory/kratos" -}}
            export DSN="{{ .Data.data.database_url }}"
            export SECRETS_DEFAULT="{{ .Data.data.secrets_default }}"
            export SECRETS_COOKIE="{{ .Data.data.secrets_cookie }}"
            export SECRETS_CIPHER="{{ .Data.data.secrets_cipher }}"
            export COURIER_SMTP_CONNECTION_URI="{{ .Data.data.smtp_url }}"
          {{- end }}
    spec:
      automountServiceAccountToken: true
      serviceAccountName: kratos
      containers:
        - name: kratos
          image: oryd/kratos:v1.0.0
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            [
              "source /vault/secrets/config && kratos serve all --config /etc/config/kratos.yaml",
            ]
          volumeMounts:
            - name: kratos-config-volume
              mountPath: /etc/config
              readOnly: true
          ports:
            - name: http-admin
              containerPort: 4434
              protocol: TCP
            - name: http-public
              containerPort: 4433
              protocol: TCP
          lifecycle: {}
          livenessProbe:
            httpGet:
              path: /admin/health/alive
              port: 4434
              httpHeaders:
                - name: Host
                  value: "127.0.0.1"
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /admin/health/ready
              port: 4434
              httpHeaders:
                - name: Host
                  value: "127.0.0.1"
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /admin/health/ready
              port: 4434
              httpHeaders:
                - name: Host
                  value: "127.0.0.1"
            failureThreshold: 60
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65534
            runAsNonRoot: true
            runAsUser: 65534
            seLinuxOptions:
              level: s0:c123,c456
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: kratos-config-volume
          configMap:
            name: kratos-config
      securityContext:
        fsGroup: 65534
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
        sysctls: []
